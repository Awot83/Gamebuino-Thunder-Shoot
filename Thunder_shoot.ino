//V30/04/2017 3 LOOPS OK
//imports the SPI library (needed to communicate with Gamebuino's screen)
#include <SPI.h>
//imports the Gamebuino library
#include <Gamebuino.h>
//creates a Gamebuino object named gb
Gamebuino gb;
int GAMEOVER_Screen = 0;
int MAXBULLET = 10;
int RandDistCar1 = 0;  //random distance between cars
int RandDistCar2 = 0;  //random distance between cars
int RandDistCar3 = 0;  //random distance between cars
int RandDistHeightCar1 = 0; // random position of cars on road
int RandDistHeightCar2 = 0; // random position of cars on road
int RandDistHeightCar3 = 0; // random position of cars on road
int if_CAR1_ExplodedOutOfScreen = 0; // if the car exploded put it out of screen
int if_CAR2_ExplodedOutOfScreen = 0; // if the car exploded put it out of screen
int if_CAR3_ExplodedOutOfScreen = 0; // if the car exploded put it out of screen

int if_ROBOT_ExplodedOutOfScreen = 0; // if the robot exploded put it out of screen
int if_TURTLE_ExplodedOutOfScreen = 0;
int NbAnimTurtle = 5;
int ExplodeTempo = 0;
int ExplodeTempoCar1 = 0;
int ExplodeTempoCar2 = 0;
int ExplodeTempoCar3 = 0;
int TempoCloud = 0; //Tempo of scrolling cloud : slower than building
int DeplacementCars;

int ExplodedShip1 = 0;
int ExplodedShip2 = 0;

int RobotHit = 0;
int TurtleHit = 0;
int CarHit1 = 0;
int CarHit2 = 0;
int CarHit3 = 0;
int ENEMY = 0;
int xEnemy = 0;
int yEnemy = 0;
int yStartEnemy = 0;
int EnemyLoop = 0;
int EnemyDistance = random(10, 60);
int tempo = 0;
int tempoTurtle = 0;
int CommingRobot = 100;
int ExplodedRobot = 0;
int ExplodedTurtle = 0;
int CommingTurtle = 80;
int StayingRobot = 0;
int StayingTurtle = 0;
int i = -1;
int k = -1;
int bullet_tempo = 0;  // temporize bullet ?
int x = 10;
int y = 24;
int shipstate = 0;
int enemystate = 0;
int DeplacementY = 1;
int DeplacementX = -1;
int bossstate = 0;
int TURTLEstate = 0;
int carstate1 = random(0, 4);
int carstate2 = random(0, 4);
int carstate3 = random(0, 4);
int score = 0;
int puissance = 30;
int scrall = 0;
int scrall2 = 0;
int isShoot = 0;
int n;
int horizon = 20;
int HorizonXA = 0;
int HorizonXB = 0;
int HorizonXC = 0;
int HorizonCloud = 0;
int CloudY = 0;
int powerBar = 24 + 10; //empty power bar : x=24
int j = 0;
int ReachPower = 0;
const byte bullet[] PROGMEM = {8, 3, 0x3C, 0xC2, 0x3C,};
const byte ExplodeBullet[] PROGMEM = {8, 7, B00010100, B01001010, B00010110, B00001110, B00010110, B01001010, B00010100,};

const byte horizon1[] PROGMEM = {88, 10, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, B00000000, B00011111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B00000001, B00000110, B00000000, B11100000, B01111011, B10111110, B00111011, B10000000, B01000011, B11011111, B00100000, B11100001, B01010111, B00000001, B00101010, B10000100, B01000001, B01000100, B01100000, B10100100, B00100000, B11101010, B11110001, B00000101, B10000001, B01100000, B10100110, B11010101, B01100110, B01100011, B10110110, B10101010, B11100000, B10001011, B01010101, B01110111, B00101010, B10000100, B01000001, B01000100, B01100110, B10110100, B00100000, B11101111, B10000101, B00000101, B01001001, B01100000, B10100110, B11010101, B01000100, B01101000, B00011110, B10101010, B11111000, B00000101, B01010101, B01101001, B00101010, B10000100, B01000001, B01100110, B01101010, B10011100, B00100000, B00001010, B01000101, B00000101, B01001001, B01100000, B10100110, B11010101, B01000100, B01111000, B00011110, B10101010, B00001000, B00000101, B01010101, B01101001, B00101010, B10000100, B01000001, B01000100, B00000010, B10011100, B00100000, B00001010, B01000101, B00000000, B01001000, B00100000, B10100100, B01010101,};
//const byte horizon2[] PROGMEMe = {88,10,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x7,0xC0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x80,0x0,0x8,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x80,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
//const byte horizon2[] PROGMEM = {88, 10, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01000000, B00000000, B00010000, B00000000, B00000100, B00000000, B00000001, B00000000, B00000000, B01000000, B00000000, B10000000, B00000000, B00100000, B00000000, B00001000, B00000000, B00000010, B00000000, B00000000, B10000000, B00000000, B10000000, B00000000, B00100000, B00000000, B00001000, B00000000, B00000010, B00000000, B00000000, B10000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00011111, B11111111, B11110000, B00000000, B00000001, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,};
const byte horizon2[] PROGMEM = {88, 10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x10, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x40, 0x0, 0x80, 0x0, 0x20, 0x0, 0x8, 0x0, 0x2, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x20, 0x0, 0x8, 0x0, 0x2, 0x0, 0x0, 0x80, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
//const byte cloud1[] PROGMEM = {88,27,B01111111,B11111000,B00000011,B11111111,B11111100,B00000001,B11111111,B10000000,B00000000,B00000000,B00000000,B11000000,B00001110,B00001110,B00000000,B00000011,B00000111,B00000000,B11100000,B11111111,B00011111,B11111100,B10000000,B00000011,B10111000,B01111111,B10000000,B11011000,B00000000,B00011111,B00000000,B11100000,B00000011,B00000000,B00000000,B11100001,B11100000,B01110000,B01110000,B00000000,B00001100,B00000000,B10000000,B00000001,B00000000,B00000000,B01100011,B00000000,B00001111,B00011111,B11111111,B10000011,B10000001,B00000000,B00000001,B00001111,B11111001,B11010110,B00000000,B00000011,B00111000,B00000000,B11100011,B11111111,B11100000,B01111111,B01110000,B00001110,B01111100,B00000000,B00000001,B11100000,B00000000,B01111110,B00000000,B00110001,B11100000,B11000000,B00000100,B00110000,B00000000,B00000000,B10000000,B01111111,B11011000,B00000000,B00010111,B00000000,B00000000,B00001111,B11100000,B00001111,B11110000,B00000011,B10000000,B01110000,B00000000,B00001000,B00000000,B00000000,B00111000,B00111111,B00110000,B00111111,B00000110,B00000000,B00011100,B00011111,B11110000,B00000000,B11111000,B01100000,B00000001,B11000000,B00000000,B10011100,B00000000,B00000110,B01110000,B00001110,B00000111,B00001110,B11000000,B00000000,B01100000,B00000000,B01110000,B00000000,B00000000,B11000000,B00000011,B00011100,B00000011,B10000000,B00000000,B00100000,B00000000,B00000000,B00000000,B00000001,B10000000,B00000000,B10110000,B00000001,B00111000,B00000000,B00011111,B11000000,B00000000,B00000000,B01111111,B11000000,B00000000,B01100000,B11110000,B01101110,B00000000,B00111000,B01111000,B01111111,B00000001,B11000000,B11110000,B00000000,B11111110,B11110011,B11000111,B10000011,B11000000,B00011111,B11000011,B11100011,B10000000,B00111100,B00001111,B00000011,B00011111,B00000011,B11111111,B00000000,B00000000,B00000000,B01111110,B00000000,B00001111,B11111100,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,};
const byte cloud1b[] PROGMEM = {};
//const byte cloud1[] PROGMEM = {};
const byte cloud1[] PROGMEM = {};

const byte ship1[] PROGMEM = {16, 11, 0x40, 0x0, 0x60, 0x0, 0x78, 0x0, 0xFF, 0x0, 0xFF, 0xFE, 0xFF, 0x1, 0xC7, 0xFF, 0xC1, 0xFE, 0x7F, 0xC0, 0x7, 0xF8, 0x0, 0x0,};
const byte ship1dw[] PROGMEM = {16, 11, B00000000, B00000000, B00000000, B00000000, B01100000, B00000000, B01111100, B00000000, B11111111, B00000000, B11111111, B11111110, B11111111, B00000001, B11000111, B11111111, B11000001, B11111110, B01111111, B11111100, B00000000, B00000000,};
const byte ship1up[] PROGMEM = {16, 11, 0x80, 0x0, 0xE0, 0x0, 0x78, 0x0, 0xFF, 0xFE, 0xFF, 0x1, 0xC7, 0xFF, 0xC1, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x0, 0x0, 0x0, 0x0,};
const byte shoot1[] PROGMEM = {8, 10, 0x88, 0x10, 0xA2, 0x48, 0xA0, 0xC0, 0xA0, 0x48, 0xA2, 0x10,};

const byte Enemy1[] PROGMEM = {16, 10, 0xFF, 0x80, 0x7, 0xC0, 0x1F, 0xE0, 0x3F, 0xF0, 0x43, 0xC0, 0x43, 0xC0, 0x3F, 0xF0, 0x1F, 0xE0, 0x3, 0xC0, 0xFF, 0x80,};
const byte Enemy2[] PROGMEM = {16, 10, 0x0, 0x0, 0xFF, 0xC0, 0x3F, 0xE0, 0x7F, 0xF0, 0x43, 0xC0, 0x7F, 0xF0, 0x3F, 0xE0, 0xFF, 0xC0, 0x0, 0x0, 0x0, 0x0,};
const byte Enemy3[] PROGMEM = {16, 10, 0xFF, 0x80, 0x7, 0xC0, 0x1F, 0xE0, 0x3F, 0xF0, 0x43, 0xC0, 0x43, 0xC0, 0x3F, 0xF0, 0x1F, 0xE0, 0x3, 0xC0, 0xFF, 0x80,};


const byte BOSS1[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x4, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFE, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x17, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xC1, 0xFF, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFC, 0x0, 0xFF, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xE0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF0, 0x0, 0x0, 0x3C, 0x0,};
const byte BOSS10[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x2, 0xFF, 0xFF, 0x80, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xE0, 0x0, 0x7F, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x2B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x87, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x8, 0xF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x87, 0xF8, 0x0, 0x0, 0x0, 0x39, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x10, 0x80, 0x0, 0x0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x4, 0x40, 0x0, 0x0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xE0, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xC0, 0x0, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0x0, 0x0, 0x78,};
const byte BOSS2[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0x80, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x0, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x39, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xC1, 0xFF, 0xF0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFC, 0x0, 0x7F, 0xF0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE0, 0x0, 0x3, 0xE0,};
const byte BOSS3[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFC, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x39, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xE0, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xC0, 0x0, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0x0, 0x0, 0x78,};
const byte BOSS4[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xE0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xF8, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xE0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0x80, 0x0, 0x0, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x39, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xE0, 0xFF, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFE, 0x0, 0x3F, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xF0, 0x0, 0x1, 0xF0,};
const byte BOSS5[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x3, 0xFF, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0xF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFE, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xF8, 0x0, 0x79, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xC0, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x1, 0xFF, 0xFC, 0x0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xC0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x7, 0xF8, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xE0, 0xFF, 0xE0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFE, 0x0, 0x7F, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF0, 0x0, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x1E, 0x0,};
const byte BOSS6[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x7, 0xEF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0xF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xC0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x1, 0xFF, 0xFC, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x7, 0xFF, 0xC0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x7, 0xF8, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x80, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFE, 0x0, 0xFF, 0xE0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xF0, 0x0, 0xFF, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x0, 0x0, 0x7F, 0x0,};
const byte BOSS7[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x13, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x97, 0xEF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0xDF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x1, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x0, 0xF, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xC0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x27, 0xF8, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x1A, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xC0, 0x7F, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0x0, 0x3F, 0xF0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF8, 0x0, 0x3F, 0xC0,};
const byte BOSS8[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x3, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x21, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0xB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x0, 0x0, 0x97, 0xEF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x5F, 0xEF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xF0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xC0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x27, 0xF8, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x8A, 0x40, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x81, 0x20, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xC0, 0x7F, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x0, 0x7F, 0xF0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xF8, 0x0, 0x7F, 0xC0,};
const byte BOSS9[] PROGMEM = {88, 54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xE3, 0xFE, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xF7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1C, 0xFF, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0x1, 0xFF, 0xBF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xFC, 0x7F, 0xDF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0x1F, 0xEF, 0x0, 0x0, 0x0, 0x3F, 0xFE, 0x0, 0x1F, 0xFF, 0xFF, 0x9F, 0xE7, 0x0, 0x0, 0x4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF3, 0x0, 0x0, 0x21, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xF9, 0x0, 0x0, 0x3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0x0, 0x0, 0x87, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFE, 0x0, 0x0, 0xF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0x0, 0x0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0x0, 0x0, 0x7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x1F, 0xFF, 0xFF, 0xFE, 0x9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0x0, 0x3E, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xC0, 0x0, 0x3F, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0, 0x0, 0x3F, 0xFF, 0x9F, 0xFF, 0x0, 0x0, 0x87, 0xF8, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xEF, 0xFF, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xFF, 0xF3, 0xFF, 0x0, 0x0, 0x41, 0x20, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xF9, 0xFF, 0x0, 0x0, 0xA, 0x40, 0x0, 0x0, 0x0, 0x7F, 0xFF, 0xFE, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7B, 0xFF, 0xFF, 0x3F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFD, 0xFF, 0xFF, 0xCF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFC, 0xFF, 0xFF, 0xFB, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xFF, 0x3F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7F, 0x1F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0x8F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xBF, 0xC7, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xDF, 0xF3, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xCF, 0xFD, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F, 0xE7, 0xFF, 0x7F, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3F, 0xE7, 0xFF, 0xC7, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7F, 0xF3, 0xFF, 0xF8, 0x7F, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFF, 0xE0, 0xFF, 0xE0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xFF, 0xFE, 0x0, 0x7F, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xF0, 0x0, 0x3F, 0x0,};

const byte power[] PROGMEM = {16, 4, B11000100, B10001000, B10101010, B10101000, B11001010, B10101000, B10000100, B01010000,};
const byte robotB1[] PROGMEM = {40, 31, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x5C, 0x0, 0x0, 0x0, 0x0, 0x5E, 0x0, 0x0, 0x0, 0xF, 0xEE, 0x7C, 0x0, 0x0, 0x10, 0xCF, 0x82, 0x0, 0x0, 0x10, 0xFE, 0x82, 0x0, 0x0, 0x9, 0x6E, 0x84, 0x0, 0x0, 0xD, 0xE, 0xDC, 0x0, 0x0, 0x7, 0xE, 0xF8, 0x3E, 0x0, 0x7F, 0xFF, 0xFC, 0xFF, 0xFF, 0xA0, 0xF, 0xE2, 0xE0, 0x0, 0x20, 0x7F, 0xC2, 0x3F, 0xFF, 0xE0, 0xCE, 0x62, 0x3F, 0xFF, 0xFF, 0x80, 0x3C, 0x1F, 0xFF, 0xFF, 0xC0, 0x30, 0x0, 0x0, 0xF, 0xFF, 0xE0, 0x0, 0x0, 0x7, 0xFF, 0xC0, 0x0, 0x0, 0x3, 0x80, 0x40, 0x0, 0x0, 0x6, 0x3F, 0x20, 0x0, 0x0, 0x8, 0x43, 0x10, 0x0, 0x0, 0x8, 0x21, 0x10, 0x0, 0x0, 0xB, 0xE1, 0xB8, 0x0, 0x0, 0x7, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xC0, 0xF0, 0x0, 0x0, 0x5, 0xC0, 0x90, 0x0, 0x0, 0x6, 0x61, 0x68, 0x0, 0x0, 0xF, 0xE1, 0xF8, 0x0, 0x0, 0x10, 0x11, 0x8, 0x0, 0x0, 0x1F, 0xF1, 0xF8,};
const byte robotB2[] PROGMEM = {40, 31, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x5C, 0x0, 0x0, 0x0, 0x0, 0x5E, 0x0, 0x0, 0x0, 0xF, 0xEE, 0x7C, 0x0, 0x0, 0x10, 0xCF, 0x82, 0x0, 0x0, 0x10, 0xFE, 0x82, 0x0, 0x0, 0x9, 0x6E, 0x84, 0x0, 0x0, 0xD, 0xE, 0xDC, 0x0, 0x0, 0x7, 0xE, 0xF8, 0xF, 0x80, 0x1F, 0xFF, 0xFE, 0x3F, 0xFF, 0xE8, 0x3, 0xF8, 0x38, 0x0, 0x8, 0x1F, 0xF0, 0xF, 0xFF, 0xF8, 0x33, 0x98, 0xF, 0xFF, 0xFF, 0xE0, 0xE, 0x7, 0xFF, 0xFF, 0xF0, 0xC, 0x0, 0x0, 0x3, 0xFF, 0xF8, 0x0, 0x0, 0x1, 0xFF, 0xF0, 0x0, 0x0, 0x3, 0x80, 0x40, 0x0, 0x0, 0x6, 0x3F, 0x20, 0x0, 0x0, 0x8, 0x43, 0x10, 0x0, 0x0, 0x8, 0x21, 0x10, 0x0, 0x0, 0xB, 0xE1, 0xB8, 0x0, 0x0, 0x7, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xC0, 0xF0, 0x0, 0x0, 0x5, 0xC0, 0x90, 0x0, 0x0, 0x6, 0x61, 0x68, 0x0, 0x0, 0xF, 0xE1, 0xF8, 0x0, 0x0, 0x10, 0x11, 0x8, 0x0, 0x0, 0x1F, 0xF1, 0xF8,};
const byte robotB3[] PROGMEM = {40, 31, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x5C, 0x0, 0x0, 0x0, 0x0, 0x5E, 0x0, 0x0, 0x0, 0xF, 0xEE, 0x7C, 0x0, 0x0, 0x10, 0xCF, 0x82, 0x0, 0x0, 0x10, 0xFE, 0x82, 0x0, 0x0, 0x9, 0x6E, 0x84, 0x0, 0x0, 0xD, 0xE, 0xDC, 0x0, 0x0, 0x7, 0xE, 0xF8, 0x7, 0xC0, 0xF, 0xFF, 0xFC, 0x1F, 0xFF, 0xF4, 0x1, 0xFC, 0x1C, 0x0, 0x4, 0xF, 0xF8, 0x7, 0xFF, 0xFC, 0x19, 0xCC, 0x7, 0xFF, 0xFF, 0xF0, 0x6, 0x3, 0xFF, 0xFF, 0xF8, 0x6, 0x0, 0x0, 0x1, 0xFF, 0xFC, 0x0, 0x0, 0x0, 0xFF, 0xF8, 0x0, 0x0, 0x3, 0x80, 0x40, 0x0, 0x0, 0x6, 0x3F, 0x20, 0x0, 0x0, 0x8, 0x43, 0x10, 0x0, 0x0, 0x8, 0x21, 0x10, 0x0, 0x0, 0xB, 0xE1, 0xB8, 0x0, 0x0, 0x7, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xE1, 0xF8, 0x0, 0x0, 0x3, 0xC0, 0xF0, 0x0, 0x0, 0x5, 0xC0, 0x90, 0x0, 0x0, 0x6, 0x61, 0x68, 0x0, 0x0, 0xF, 0xE1, 0xF8, 0x0, 0x0, 0x10, 0x11, 0x8, 0x0, 0x0, 0x1F, 0xF1, 0xF8,};
const byte Explode[] PROGMEM = {40, 31, 0x8, 0x80, 0x43, 0x84, 0x0, 0xC, 0xC0, 0xA4, 0x8F, 0x4, 0x4, 0x48, 0x98, 0x9E, 0x4C, 0x4, 0x60, 0xDC, 0x90, 0x18, 0x2, 0x6D, 0x3C, 0x38, 0x68, 0x43, 0x21, 0x7F, 0x28, 0xF0, 0x23, 0x30, 0x7C, 0x35, 0xF0, 0x83, 0xD2, 0x7C, 0x56, 0xE0, 0x43, 0x52, 0x2C, 0xF, 0xC0, 0x42, 0xB3, 0x2C, 0xD, 0x88, 0x8, 0x73, 0x4, 0x19, 0x80, 0xA0, 0x73, 0x32, 0x1B, 0x0, 0x2, 0x72, 0x35, 0x3E, 0x8, 0x57, 0x7B, 0x3D, 0x52, 0x90, 0xA7, 0x1D, 0x68, 0x32, 0x30, 0xE3, 0x87, 0xF8, 0x38, 0x30, 0x92, 0x86, 0xB0, 0x38, 0xE0, 0x75, 0xC1, 0x20, 0xB0, 0xC2, 0xB, 0xCE, 0x8, 0xA1, 0x80, 0x5, 0x8F, 0x3A, 0x66, 0x80, 0x5, 0xA7, 0x82, 0xF, 0x82, 0x82, 0xE5, 0x1, 0x5, 0x1A, 0x1, 0xC7, 0xC5, 0x14, 0x36, 0x10, 0xC7, 0xD4, 0x1C, 0x3C, 0x8, 0x73, 0xC8, 0x38, 0xF0, 0x1E, 0x33, 0x98, 0x3B, 0xF2, 0x3, 0x33, 0x99, 0x33, 0xE0, 0x1, 0xF1, 0xDA, 0x57, 0xC4, 0x20, 0x7F, 0xF3, 0xF7, 0x80, 0x1, 0x7E, 0x72, 0x17, 0x90, 0x0, 0x2F, 0xFF, 0xFF, 0x0,};
const byte bulletR[] PROGMEM = {16, 5, B00111110, B00000000, B01000001, B00000000, B10000000, B10000000, B01000001, B00000000, B00111110, B00000000,};

const byte CAR1[] PROGMEM = {24, 10, 0x7, 0xE0, 0x0, 0x7C, 0x3F, 0x80, 0x8C, 0x30, 0x40, 0xEC, 0x3D, 0x40, 0xEB, 0xFD, 0x40, 0x87, 0x30, 0x40, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xC0, 0xEF, 0xFD, 0xC0, 0x7F, 0xFF, 0x80,};
const byte CAR1X[] PROGMEM = {16, 7, 0x1F, 0x0, 0x71, 0xF0, 0x91, 0x88, 0x9F, 0x88, 0xFF, 0xF8, 0xDF, 0xD8, 0x70, 0x70,};
const byte CAR2[] PROGMEM = {24, 12, 0x3, 0xE0, 0x0, 0x2, 0x30, 0x0, 0x7E, 0x3F, 0x0, 0x82, 0x31, 0x80, 0xBE, 0x30, 0x80, 0xBE, 0x30, 0x80, 0xBE, 0xD1, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x0, 0x80, 0xB8, 0x1D, 0x80, 0xEF, 0xF7, 0x80, 0x7F, 0xFF, 0x0,};
const byte CAR2X[] PROGMEM = {16, 8, 0xE, 0x0, 0x7B, 0xC0, 0x8B, 0x20, 0x8B, 0x20, 0xFF, 0x20, 0xFF, 0xE0, 0xDF, 0x60, 0x71, 0xC0,};
const byte CAR3[] PROGMEM = {24, 12, 0x1, 0x80, 0x0, 0x6, 0xC0, 0x0, 0x79, 0x3F, 0x80, 0xE9, 0xB7, 0xC0, 0xE8, 0x33, 0xC0, 0xE6, 0xD7, 0xC0, 0xEE, 0xEF, 0xC0, 0x91, 0x9, 0x40, 0xF9, 0x2F, 0xC0, 0xFD, 0xF, 0xC0, 0xEF, 0xFD, 0xC0, 0x7F, 0xFF, 0x80,};
const byte CAR3X[] PROGMEM = {16, 8, 0xC, 0x0, 0x6B, 0xC0, 0xEA, 0xE0, 0xD6, 0xE0, 0xD5, 0xE0, 0xE9, 0xE0, 0xF9, 0xE0, 0x7F, 0xC0,};
const byte CAR4[] PROGMEM = {24, 14, 0x0, 0x30, 0x0, 0xFF, 0xE8, 0x0, 0x80, 0x3C, 0x0, 0x80, 0x3F, 0x0, 0x80, 0x2D, 0x80, 0xD1, 0x7C, 0x80, 0x80, 0xC, 0x80, 0x89, 0xB4, 0x80, 0x9D, 0xB8, 0x80, 0x88, 0x1, 0x80, 0xB0, 0x1C, 0x80, 0xA8, 0x15, 0x80, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0x0,};
const byte CAR4X[] PROGMEM = {16, 9, 0x3, 0x0, 0xFE, 0x80, 0x83, 0xC0, 0xA2, 0xA0, 0xF5, 0xA0, 0xA1, 0xE0, 0xF1, 0xE0, 0xDF, 0x60, 0x71, 0xC0,};
const byte CAR5[] PROGMEM = {24, 10, 0xF, 0xC0, 0x0, 0x30, 0x7E, 0x0, 0x48, 0x61, 0x80, 0xA8, 0x60, 0x40, 0xA5, 0xA0, 0x40, 0x8D, 0xC3, 0x40, 0x80, 0x0, 0x40, 0xB8, 0xE, 0xC0, 0xEF, 0xFB, 0xC0, 0x7F, 0xFF, 0x80,};
const byte CAR5X[] PROGMEM = {16, 6, 0x3C, 0x0, 0x67, 0xC0, 0xDE, 0x20, 0xFC, 0xE0, 0xBF, 0xA0, 0xE0, 0xE0,};
const byte CarExplode[] PROGMEM = {24, 14, B00010000, B00000100, B00000000, B00110010, B01011000, B00000000, B00011011, B00111111, B00000000, B01001110, B01111010, B00000000, B00010110, B11010001, B10000000, B01011011, B00110011, B00000000, B01001111, B11100111, B00000000, B01101100, B11011111, B00000000, B00111111, B01111010, B00000000, B00101111, B11101010, B10000000, B10001011, B10010101, B00000000, B11100101, B00100111, B10000000, B00110101, B11101110, B00000000, B00000110, B01101000, B00000000,};

const byte LIFE0[] PROGMEM = {24, 6, B00000000, B00000000, B00000000, B00111001, B11001100, B11100000, B00010101, B00010010, B01010000, B00010101, B10011110, B01010000, B00111001, B11010010, B11100000, B00000000, B00000000, B00000000,};
const byte LIFE1[] PROGMEM = {24, 6, 0x6C, 0x0, 0x0, 0xBE, 0x0, 0x0, 0xFE, 0x0, 0x0, 0x7C, 0x0, 0x0, 0x38, 0x0, 0x0, 0x10, 0x0, 0x0,};
const byte LIFE2[] PROGMEM = {24, 6, 0x6C, 0x6C, 0x0, 0xBE, 0xBE, 0x0, 0xFE, 0xFE, 0x0, 0x7C, 0x7C, 0x0, 0x38, 0x38, 0x0, 0x10, 0x10, 0x0,};
const byte LIFE3[] PROGMEM = {24, 6, 0x6C, 0x6C, 0x6C, 0xBE, 0xBE, 0xBE, 0xFE, 0xFE, 0xFE, 0x7C, 0x7C, 0x7C, 0x38, 0x38, 0x38, 0x10, 0x10, 0x10,};
const byte GAMEOVER[] PROGMEM = {};

int NBLIFES = 3;
int TEMPO_IMMUNITY = 0;
int IMMUNITY = 0;

// array containing the different sprites
#define NUM_LIFE 4
const byte* LIFE[NUM_LIFE] = {
  LIFE0, //0
  LIFE1, //1
  LIFE2, //2
  LIFE3, //3
};

#define NUM_SPRITESCARS 5
const byte* cars[NUM_SPRITESCARS] = {
  CAR1, //0
  CAR2, //1
  CAR3, //2
  CAR4, //3
  CAR5, //4
};

#define NUM_ENEMYS 3
const byte* ENEMYS[NUM_ENEMYS] = {
  Enemy1, //0
  Enemy2, //1
  Enemy3, //2

};

int bullets[10][3]; // array of array of bullets, with 10 rows of = X,Y,Alive=0/1

int bulletRobotArray[3]; // array for the bullet of the robot (only 1 bullet)

// array containing the different sprites
#define NUM_SPRITES 3
const byte* ship[NUM_SPRITES] = {
  ship1, //0
  ship1up, //1
  ship1dw, //2
};

#define NUM_SPRITESROBOT 3
const byte* ROBOT[NUM_SPRITESROBOT] = {
  robotB1, //0
  robotB2, //1
  robotB3, //2
};

#define NUM_BOSS 10
const byte* BOSS[NUM_BOSS] = {
  BOSS1, //0
  BOSS2, //1
  BOSS3, //2
  BOSS4, //3
  BOSS5, //4
  BOSS6, //5
  BOSS7, //6
  BOSS8,//7
  BOSS9,//8
  BOSS10,//9
};


// the setup routine runs once when Gamebuino starts up
void setup() {
  // initialize the Gamebuino object
  gb.begin();
  //display the main menu:
  gb.titleScreen(F("THUNDER SHOOT"));
  //gb.popup(F("LET'S GO !!"), 10);

  gb.battery.show = false;
  GAMEOVER_Screen = 0;
  score = 0;
  NBLIFES = 3;
  RobotHit = 0;
  TurtleHit = 0;
  CarHit1 = 0;
  CarHit2 = 0;
  CarHit3 = 0;
  ENEMY = 0;
  tempo = 0;
  tempoTurtle = 0;
  CommingRobot = 100;
  ExplodedRobot = 0;
  ExplodedTurtle = 0;
  CommingTurtle = 100;
  StayingRobot = 0;
  StayingTurtle = 0;
  yStartEnemy = random(0, 60);
  EnemyLoop = 0;
}

// the loop routine runs over and over again forever
void loop() {
  if (gb.update()) {

    // exit game
    if (gb.buttons.pressed(BTN_C)) {
      setup();
    }

    gb.display.drawLine(0, horizon, LCDWIDTH, horizon);
    gb.display.drawLine(LCDWIDTH - scrall, horizon, LCDWIDTH - scrall2 + 30, LCDHEIGHT);

    // 1rst sprite
    gb.display.drawBitmap(HorizonXA, horizon - 10, horizon1);  // backgroud 1
    gb.display.drawBitmap(HorizonCloud / 10, horizon - 30 + (CloudY / 5), cloud1); // CLOUD 1
    gb.display.drawBitmap(HorizonXB, horizon + 15, horizon2);  // backgroud 2
    gb.display.drawBitmap(HorizonXC, horizon + 35, horizon2);  // backgroud 2
    //2nd sprite
    gb.display.drawBitmap(HorizonXA + 88, horizon - 10, horizon1); // backgroud 1
    gb.display.drawBitmap(HorizonCloud / 10 + 88, horizon - 30 + (CloudY / 5), cloud1); // Cloud1 1
    gb.display.drawBitmap(HorizonXB + 88, horizon + 15, horizon2); // backgroud 2
    gb.display.drawBitmap(HorizonXC + 88, horizon + 35, horizon2); // backgroud 2
    //

    HorizonCloud--;
    if (HorizonCloud < -88 * 10) {
      HorizonCloud = 0; //*10 because --> /10 bitmap deplacement
    }

    scrall = scrall + 1;
    scrall2 = scrall2 + 2;
    HorizonXA--;
    if (HorizonXA < -88) {
      HorizonXA = 0;
    }
    HorizonXB = HorizonXB - 2;
    if (HorizonXB < -88) {
      HorizonXB = 0;
    }
    HorizonXC = HorizonXC - 4;
    if (HorizonXC < -88) {
      HorizonXC = 0;
    }

    if (LCDWIDTH + 20 - scrall < 0) {
      scrall = 0;
      scrall2 = 0;
    }


    gb.display.setColor(WHITE, WHITE);
    gb.display.fillRect(0, 0, LCDWIDTH, 7);
    gb.display.setColor(BLACK, BLACK);
    gb.display.drawBitmap(10 + 10, 1, power); // backgroud 1
    gb.display.cursorX = 1;
    gb.display.cursorY = 0;
    gb.display.println(score);


    //draw the field and barre de vie puissance and remains life
    gb.display.setColor(WHITE, WHITE);
    gb.display.fillRect(LCDWIDTH - 60 + 10, 2, 20, 3); // white rect for powerbar
    gb.display.setColor(BLACK, BLACK);
    gb.display.drawRect(LCDWIDTH - 60 + 10, 2, 20, 3);
    gb.display.drawLine(24 + 10, 3, powerBar, 3); // fill the power bar (min 24 max 43)
    gb.display.drawBitmap(LCDWIDTH - 60 + 20 + 14, 1, LIFE[NBLIFES]);

    // ----------------  draw cars

    if (ENEMY == 1) { // CARS only when robot is here not turtle

      if (CarHit1 <= 10) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(DeplacementCars + if_CAR1_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar1, 17, 9);
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(DeplacementCars + if_CAR1_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar1, cars[carstate1]);
      }
      if (CarHit2 <= 10) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(DeplacementCars - 32 - RandDistCar1 + if_CAR2_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar2, 17, 9);
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(DeplacementCars - 32 - RandDistCar1 + if_CAR2_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar2, cars[carstate2]);
      }
      if (CarHit3 <= 10) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(DeplacementCars - 65 - RandDistCar2 + if_CAR3_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar3, 17, 9);
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(DeplacementCars - 65 - RandDistCar2 + if_CAR3_ExplodedOutOfScreen, horizon + 23 + RandDistHeightCar3, cars[carstate3]);
      }


      if (DeplacementCars > LCDWIDTH + 88) {   // if car out of screen , put new cars
        DeplacementCars = -18;
        RandDistHeightCar1 = random(-4, 4);
        RandDistHeightCar2 = random(-4, 4);
        RandDistHeightCar3 = random(-4, 4);
        carstate1 = random(0, 4);
        carstate2 = random(0, 4);
        carstate3 = random(0, 4);
        if_CAR1_ExplodedOutOfScreen = 0;
        if_CAR2_ExplodedOutOfScreen = 0;
        if_CAR3_ExplodedOutOfScreen = 0;
        RandDistCar1 = random(1, 20);
        RandDistCar2 = random(1, 20);
      }
      DeplacementCars++;
    }

    //----------------- draw the SHIP
    gb.display.setColor(WHITE, WHITE);
    gb.display.fillRect(x + 1, y + 4, 14, 5); // white rect for ship
    gb.display.setColor(BLACK, BLACK);
    gb.display.drawBitmap(x, y, ship[shipstate]);




    // ======================= ENNEMIS MOOVES

    //--------------------- ENEMIES SHIPS
    if (ENEMY == 0) {   //  if ENEMY=1 -> ship passed 3 times : then robot
      if (ExplodedShip1 == 0) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(LCDWIDTH + 1 + xEnemy, LCDHEIGHT - yStartEnemy + 3 + yEnemy, 5, 5); // white rect for ship
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(LCDWIDTH + xEnemy, LCDHEIGHT - yStartEnemy + yEnemy, ENEMYS[enemystate]);
      }

      if (ExplodedShip2 == 0) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(LCDWIDTH + 1 + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + 3 + yEnemy - EnemyDistance, 5, 5); // white rect for ship
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(LCDWIDTH + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + yEnemy - EnemyDistance, ENEMYS[enemystate]);
      }


      xEnemy--;
      yEnemy += DeplacementY;
      if (LCDHEIGHT - yStartEnemy + yEnemy > LCDHEIGHT) {  // bottom max enemy deplacement
        DeplacementY = -1;
      } 
      if (LCDHEIGHT - yStartEnemy + yEnemy  < 10) {  // up max enemy deplacement
        DeplacementY = 1;
      }

      if (xEnemy < -LCDWIDTH - 15) { // if Enemy ship out of screen
        xEnemy = 0;  // replace enemy left side of screen
        yStartEnemy = random(20, 50); // randomly appears Y
        EnemyDistance = random(7, 15); // distance between enemies ships
        DeplacementY = -1;
        EnemyLoop++;  // number of times ennemy looped
        ExplodedShip2 = 0; //if exploded ship can be seen again
        ExplodedShip1 = 0; //if exploded ship can be seen again
      }
      //----- ENEMY SHIP animation
      tempoTurtle++; //same tempo counter as turtle
      if (tempoTurtle > 7) {
        enemystate++;
        tempoTurtle = 0;
      }
      if (enemystate > 2) {
        enemystate = 0;
      }

      if (EnemyLoop == 6) {  // 6 loop before next boss
        ENEMY = 1; // if enemy ship passed 3 times : then robot
      }
    }

    //--------------- TURTLE
    /// ----------------------- makes the boss turtle arrives
    if (ENEMY == 2) { // if robot is dead

      CommingTurtle--;
      if (CommingTurtle < 0) {
        CommingTurtle = 0;
        NbAnimTurtle = 10;
      }

      //----- turtle animation

      if (tempoTurtle > 4) {
        TURTLEstate++;
      }
      if (TURTLEstate == NbAnimTurtle) { // Nbanimturtle =5 if turtle arrives,  and = 10 if turtle is arrived, so that the turtle start shooting when arrived
        TURTLEstate = 0;
      }

      tempoTurtle++;
      if (tempoTurtle > 5) {
        tempoTurtle = 0;
      }

      // ----turtle display
      if (TurtleHit < 50) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(63 + CommingTurtle, 5 + (horizon - 20), 25, 42);
        gb.display.fillTriangle(49 + CommingTurtle, 48 + (horizon - 20), 64 + CommingTurtle, 17 + (horizon - 20), 87 + CommingTurtle, 48 + (horizon - 20));
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(CommingTurtle + if_TURTLE_ExplodedOutOfScreen, horizon - 20, BOSS[TURTLEstate]);
      }
    }

    //-------------------------  Boss robot
    // ------------------- makes the boss robot arrives and go back


    if (ENEMY == 1) { // if the robot has exploded

      CommingRobot = CommingRobot + i;
      if (CommingRobot < 0) {
        i = 0;
        StayingRobot++;
        if (StayingRobot > 100) {
          i = 1;
          StayingRobot = 0;
        }
      }
      if (CommingRobot >= 100) {
        i = -1; // go back
        if_ROBOT_ExplodedOutOfScreen = 0; //reset after explosion of robot
      }

      if (RobotHit < 50) {
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(60 + CommingRobot, 14 + (horizon - 20), 18, 26); //+horizon-20 => boss seems to stay at the horizon line
        gb.display.fillRect(46 + CommingRobot, 22 + (horizon - 20), 30, 2);
        gb.display.fillRect(40 + 25 + CommingRobot, 10 + (horizon - 20), 3, 4);
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(40 + CommingRobot + if_ROBOT_ExplodedOutOfScreen, 10 + (horizon - 20), ROBOT[bossstate]);

        if (CommingRobot < 0) {  // robot is arrived
          if (bossstate == 0) { // robot shooting when this position
            bulletRobotArray[2] = 1; // bullet is alive
            bulletRobotArray[0] = 40 + CommingRobot + if_ROBOT_ExplodedOutOfScreen;
            bulletRobotArray[1] = 10 + (horizon - 20) + 12;
            bulletRobotArray[2] = 1; // Bullet if alive
          }
        }



        if (tempo == 5) {
          bossstate++;
        }
        if (bossstate == 3) {
          bossstate = 0;
        }
      }
      tempo++;
      if (tempo > 5) {
        tempo = 0;
      }

    }

    // ======================== PLAYER CONTROL
    shipstate = 0;
    if (gb.buttons.repeat(BTN_RIGHT, 1)) {
      if (x < LCDWIDTH - 16) {
        x = x + 1;
      }
    }

    if (gb.buttons.repeat(BTN_LEFT, 1)) {
      if (x > 0) {
        x = x - 1;
      }
    }

    if (gb.buttons.repeat(BTN_DOWN, 1)) {
      if (y < LCDHEIGHT - 8) {
        y = y + 1;
        shipstate = 2;
        horizon--;
        CloudY--;
        bulletRobotArray[1]--;
        for (n = 0; n < MAXBULLET; n++) {
          bullets[n][1]--;
        }
      }
    }
    if (gb.buttons.repeat(BTN_UP, 1)) {
      if (y > 6) {
        y = y - 1;
        shipstate = 1;
        horizon++;
        CloudY++;
        bulletRobotArray[1]++;
        for (n = 0; n < MAXBULLET; n++) {
          bullets[n][1]++;
        }
      }
    }

    if (gb.buttons.repeat(BTN_A, 1)) {
      gb.display.drawBitmap(x + 16, y + 2, shoot1);
      //add sound
      for (n = 0; n < MAXBULLET; n++) {
        if (bullets[n][2] == 0) { // if bullet dead
          bullets[n][0] = x + 16; //bullet x is ship x
          bullets[n][1] = y + 4; // bullet y is ship y
          bullets[n][2] = 1; // bullet is now alive
          break;
        }
      }
    }


    // ---------------POWER   BAR ----------------
    if (gb.buttons.repeat(BTN_B, 1)) {
      powerBar++;   // Fill the power bar
      if (powerBar > 42 + 10) {
        powerBar = 43 + 10;
      }
    }
    if (powerBar == 43 + 10) {
      ReachPower = 1; // power bar reached max
    }

    if (ReachPower == 1 && powerBar > 23 + 10) {
      j = random(0, 100);
      if (j > 50 && powerBar > 23 + 10) { // clignotte ray blast
        gb.display.drawTriangle(x + 16, y + 6, LCDWIDTH, 0, LCDWIDTH, LCDHEIGHT);
      }
      if (j < 50 && powerBar > 23 + 10) {
        gb.display.fillTriangle(x + 16, y + 6, LCDWIDTH, 0, LCDWIDTH, LCDHEIGHT);// mega shoot
      }
    }

    if (ReachPower == 1) {
      powerBar--;   // power bar se vide jusqu'a 0 (24)
      if (powerBar < 24 + 10) {
        ReachPower = 0;
        powerBar = 24 + 10;
      }
    }
    // ---------------------------BULLETS INCREMENTATION ----------------
    // -----  player bullet
    for (n = 0; n < MAXBULLET; n++) {
      if (bullets[n][2] == 1)  { // if bullet alive
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(bullets[n][0] + 2, bullets[n][1], 5, 3); // white rect for BULLET
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], bullet);   // print bullet
        bullets[n][0] = bullets[n][0] + 3; // bullet moves
      }
      if (bullets[n][0] > LCDWIDTH) {
        bullets[n][2] = 0; // out of screen ? > bullet is dead
        bullets[n][0] = -40;  // replace bullet out of screen to avoid false shoot
         bullets[n][1] = -40;
      }

    }

    // -----  robot bullet
    if (bulletRobotArray[2] == 1) { // if bullet is alive
      bulletRobotArray[2] = 1; //then robot shoots
      gb.display.setColor(WHITE, WHITE);
      gb.display.fillRect(bulletRobotArray[0] + 1 - 6, bulletRobotArray[1] - 2, 6, 3); // white rect for BULLET
      gb.display.setColor(BLACK, BLACK);
      gb.display.drawBitmap(bulletRobotArray[0] - 6, bulletRobotArray[1] - 3, bulletR); // print bullet ROBOT
      bulletRobotArray[0] -= 4; // speed of the bullet of the robot
    }
    if (bulletRobotArray[0] < -10) {
      bulletRobotArray[2] = 0; // If bullet out of screen > dead
    }




    //===============================BULLETS COLLISIONS ===============================================


    //collision whith ENEMY SHIP 1
    for (n = 0; n < MAXBULLET; n++) {
      if(ExplodedShip1==0){
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, LCDWIDTH + xEnemy, LCDHEIGHT - yStartEnemy + yEnemy, ENEMYS[enemystate])) {
        bullets[n][2] = 0; // > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
        ExplodedShip1 = 1; //  the Ship as exploded
        
        gb.display.drawBitmap(LCDWIDTH + xEnemy, LCDHEIGHT - yStartEnemy + yEnemy, ExplodeBullet); // SHIP explosion
        score += 5; // score for SHIP kill
      }
      if (ExplodeTempo > 20) {  //time explosion of Ship stays
        ExplodeTempo = 0;   // time explosion of Ship reset
      }
      ExplodeTempo++;
    }
    }

    //collision whith ENEMY SHIP 2
    for (n = 0; n < MAXBULLET; n++) {
       if(ExplodedShip2==0){
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, LCDWIDTH + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + yEnemy - EnemyDistance, ENEMYS[enemystate])) {
        bullets[n][2] = 0; // > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
        ExplodedShip2 = 1; //  the Ship as exploded
        EnemyDistance=100; // Place ship 2 out of screen to avoid false shoot
        gb.display.drawBitmap(LCDWIDTH + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + yEnemy - EnemyDistance, ExplodeBullet); // SHIP explosion
        score += 5; // score for ship kill
      }
      if (ExplodeTempo > 20) {  //time explosion of Ship stays
        ExplodeTempo = 0;   // time explosion of Ship reset
      }
      ExplodeTempo++;
    }
    }

    //collision whith robot
    for (n = 0; n < MAXBULLET; n++) {
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, 40 + CommingRobot + if_ROBOT_ExplodedOutOfScreen, 10 + (horizon - 20), ROBOT[bossstate])) {
        RobotHit++;
        bullets[n][2] = 0; // touch boss? > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
      }
    }
    if (RobotHit > 50) {
      gb.display.drawBitmap(40 + CommingRobot, 10 + (horizon - 20), Explode); // robot explosion

      if_ROBOT_ExplodedOutOfScreen = 50; // if exploded robot ? -> out of screen
      score += 5; // score for robot kill
      if (ExplodeTempo > 20) {  //time explosion of robot stays
        RobotHit = 0; // counter hit of robot reset
        ExplodeTempo = 0;   // time explosion of robot reset
        ExplodedRobot = 1; // as the robot already exploded ?
        CommingRobot = 100; // robot sprite go out screen
        ENEMY = 2; // robot dead > TURTLE
      }

      ExplodeTempo++;
    }

    // ------------- collision with turtle
    for (n = 0; n < MAXBULLET; n++) {
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, CommingTurtle - 4, horizon - 20, BOSS[TURTLEstate])) {
        TurtleHit++;
        bullets[n][2] = 0; // touch boss? > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
      }
    }
    if (TurtleHit > 50) {
      gb.display.drawBitmap(CommingTurtle + 50, horizon - 20 + 10, Explode); // turtle explosion

      // if_TURTLE_ExplodedOutOfScreen = 100; // if exploded TURLE ? -> out of screen
      score += 5; // score for robot kill
      if (ExplodeTempo > 20) {  //time explosion of TURTLE stays
        TurtleHit = 0; // counter hit of TURTLE reset
        ExplodeTempo = 0;   // time explosion of TURTLE reset
        ExplodedTurtle = 1; // as the robot already exploded ?
        CommingTurtle = 100; // TURTLE sprite go out screen
        NbAnimTurtle = 5; // animation of turlte is max to 5 so that it doesnt shoot when arriving
        ENEMY = 0; // TURTLE DEAD > SHIPS
        EnemyLoop = 0; // Ship loop
      }

      ExplodeTempo++;
    }



    //--------------collision whith cars 1
    for (n = 0; n < MAXBULLET; n++) {
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, DeplacementCars, horizon + 23 + RandDistHeightCar1, cars[carstate1])) {
        CarHit1++;
        bullets[n][2] = 0; // touch car ? > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
      }
    }
    if (CarHit1 > 10) {  // 10 bullets to destroy a car
      gb.display.drawBitmap(DeplacementCars, horizon + 23 + RandDistHeightCar1, CarExplode); // car explosion

      if_CAR1_ExplodedOutOfScreen = 200; // exploded car ? -> out of screen
      score += 2; // score for car killed

      if (ExplodeTempoCar1 > 5) { //time explosion of car stays
        ExplodeTempoCar1 = 0;   // time explosion of car reset
        CarHit1 = 0; // counter hit of car reset
      }
      ExplodeTempoCar1++;
    }


    //collision whith cars 2
    for (n = 0; n < MAXBULLET; n++) {
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, DeplacementCars - 32 - RandDistCar1, horizon + 23 + RandDistHeightCar2, cars[carstate2])) {
        CarHit2++;
        bullets[n][2] = 0; // touch car ? > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
      }
    }
    if (CarHit2 > 10) {  // 10 bullets to destroy a car
      gb.display.drawBitmap(DeplacementCars - 32, horizon + 23 + RandDistHeightCar2, CarExplode); // car explosion

      if_CAR2_ExplodedOutOfScreen = 200; // exploded car ? -> out of screen
      score += 2; // score for car killed

      if (ExplodeTempoCar2 > 5) { //time explosion of car stays
        ExplodeTempoCar2 = 0;   // time explosion of car reset
        CarHit2 = 0; // counter hit of car reset

      }
      ExplodeTempoCar2++;
    }



    //collision whith cars 3
    for (n = 0; n < MAXBULLET; n++) {
      if (gb.collideBitmapBitmap(bullets[n][0], bullets[n][1], bullet, DeplacementCars - 65 - RandDistCar1, horizon + 23 + RandDistHeightCar3, cars[carstate3])) {
        CarHit3++;
        bullets[n][2] = 0; // touch car ? > bullet is dead
        gb.display.drawBitmap(bullets[n][0], bullets[n][1], ExplodeBullet); // bullet explosion
        bullets[n][0] = 0; //bullet x reset to 0
        bullets[n][1] = 0; // bullet y reset to 0
      }
    }
    if (CarHit3 > 10) {  // 10 bullets to destroy a car
      gb.display.drawBitmap(DeplacementCars - 65, horizon + 23 + RandDistHeightCar3, CarExplode); // car explosion

      if_CAR3_ExplodedOutOfScreen = 200; // exploded car ? -> out of screen
      score += 2; // score for car killed

      if (ExplodeTempoCar3 > 5) {  //time explosion of car stays
        ExplodeTempoCar3 = 0;   // time explosion of car reset
        CarHit3 = 0; // counter hit of car reset

      }
      ExplodeTempoCar3++;
    }


    //---------- collision of ship with robot bullet / robot / turtle

    //collision with robot's bullets or robot or turtle or Enemy ships || ||
  //[bug to fix : player ship explode when up left sceen: bulletrobotarray possible] 
  if (gb.collideBitmapBitmap(x, y, ship[shipstate], bulletRobotArray[0] - 6, bulletRobotArray[1] - 3, bulletR) || gb.collideBitmapBitmap(x, y, ship[shipstate], CommingTurtle + if_TURTLE_ExplodedOutOfScreen, horizon - 20, BOSS[TURTLEstate])|| gb.collideBitmapBitmap(x, y, ship[shipstate], 40 + CommingRobot + if_ROBOT_ExplodedOutOfScreen, 10 + (horizon - 20), ROBOT[bossstate]) || gb.collideBitmapBitmap(x, y, ship[shipstate], LCDWIDTH + xEnemy, LCDHEIGHT - yStartEnemy + yEnemy, ENEMYS[enemystate])  || gb.collideBitmapBitmap(x, y, ship[shipstate], LCDWIDTH + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + yEnemy - EnemyDistance, ENEMYS[enemystate]) ) {
      
// line with no robot bullet : if (gb.collideBitmapBitmap(x, y, ship[shipstate], CommingTurtle + if_TURTLE_ExplodedOutOfScreen, horizon - 20, BOSS[TURTLEstate])|| gb.collideBitmapBitmap(x, y, ship[shipstate], 40 + CommingRobot + if_ROBOT_ExplodedOutOfScreen, 10 + (horizon - 20), ROBOT[bossstate]) || gb.collideBitmapBitmap(x, y, ship[shipstate], LCDWIDTH + xEnemy, LCDHEIGHT - yStartEnemy + yEnemy, ENEMYS[enemystate])  || gb.collideBitmapBitmap(x, y, ship[shipstate], LCDWIDTH + xEnemy + EnemyDistance, LCDHEIGHT - yStartEnemy + yEnemy - EnemyDistance, ENEMYS[enemystate]) ) {
      if (ExplodedShip1 == 0 || ExplodedShip2 == 0) { // do not exploded player's ship if enemy's ships are exploded when touching place where enemy should be
        gb.display.drawBitmap(x, y, CarExplode); // ship explosion
        if (IMMUNITY == 1) {
          NBLIFES--;
        }
        IMMUNITY = 0;
      }
    }

    if (IMMUNITY == 0) {
      TEMPO_IMMUNITY++;    // when shooted or touched by a enemy, 2 sec of imunity before loosing a new life
      if (TEMPO_IMMUNITY > 40) { // 40 fps = 2sec
        TEMPO_IMMUNITY = 0;
        IMMUNITY = 1;
      }
    }

    if (NBLIFES < 1) {
      NBLIFES = 0;
      gb.display.setColor(WHITE, WHITE);
      gb.display.fillRect(10, 19, 66, 10); // white rect for powerbar
      gb.display.setColor(BLACK, BLACK);
      gb.display.drawBitmap(0, 0, GAMEOVER); // Gameover screen


      GAMEOVER_Screen++;
      if (GAMEOVER_Screen > 30) { // 30 fps = 1.5sec
        gb.display.setColor(WHITE, WHITE);
        gb.display.fillRect(0, 0, LCDWIDTH, LCDHEIGHT); // white rect
        gb.display.setColor(BLACK, BLACK);
        gb.display.drawBitmap(0, 0, GAMEOVER); // Gameover screen
        gb.display.cursorX = 50 ;
        gb.display.cursorY = 5;
        gb.display.print(score);
        gb.display.cursorX = 0 ;
        gb.display.print("Your score:");

      }


    }



  }
}






